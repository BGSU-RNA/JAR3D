% pJAR3DMaster runs JAR3D to make SCFG models, produce diagnostics

% -------------------------------------------------------------------- % choices for the user

% this is how inputs needed to be when the motif atlas was generated by Matlab
Input = 'HL_3.48_2021-08-18_16';  % where the data comes from
Release = ['HL' filesep '3.48'];    % where the output files go

Input = 'IL_3.48_2021-08-18_12';   % took about 6.5 hours to run
Release = ['IL' filesep '3.48'];

% this is how input needs to be when the motif atlas was generated by Python
loop_type = 'J4';
loop_type = 'HL';
loop_type = 'IL';
loop_type = 'J3';

version = '3.98';
version = '3.48';

Input = [loop_type '_' version];
Release = [loop_type filesep version];


MotifLibraryLocation = 'C:\Users\zirbel\Documents\JAR3D\Motifs\';      % where to find the motif atlas release
OutputBase = 'C:\Users\zirbel\Documents\JAR3D';                        % where to write JAR3D models
MatlabCodepath = 'C:\Users\zirbel\Documents\GitHub\JAR3D\Matlab';      % location of Matlab code
JAR3Dpath = 'C:\Users\zirbel\Documents\GitHub\JAR3D\target\classes';   % location of class files for Java programs; needed for scoring sequences
Pythonpath = 'C:\Users\zirbel\Documents\GitHub\JAR3D\python';          % location of python programs in the JAR3D release

% ------------- New code in 2025 to download the motif atlas release and create the necessary .mat files

if ~exist([MotifLibraryLocation Input],'dir')
	mkdir([MotifLibraryLocation Input])
end
MotifLibraryPath = [MotifLibraryLocation Input filesep 'mat'];
if ~exist(MotifLibraryPath,'dir')
	mkdir(MotifLibraryPath)
end

Filenames = dir(MotifLibraryPath);
if length(Filenames) < 5
	convert_motif_groups_to_matlab(MotifLibraryLocation,Input,loop_type,version,MotifLibraryPath)
end

% -------------------------------------------------------------------- % do not change the code below
% run JAR3D on the selected motif group

addpath(MatlabCodepath)
javaaddpath(JAR3Dpath)

if ~exist([OutputBase filesep Release],'dir')
	mkdir([OutputBase filesep Release])
end
diary([OutputBase filesep Release filesep 'JAR3D log' strrep(char(datetime),':','-') '.txt'])
disp(['Timestamp ' datestr(now)])

% download the release from the RNA Motif Atlas website
% add code here once we know whether .csv or .json or another format works best
% https://rna.bgsu.edu/rna3dhub/motifs/release/hl/current/csv
% https://rna.bgsu.edu/rna3dhub/motifs/release/hl/current/json

pMakeSCFGModels(MotifLibraryPath,OutputBase,Release,1)

numfiles = pGenerateRandomMotifSequences(OutputBase,Release,1);
numfiles = pGenerateRandomMotifSequences(OutputBase,Release,2);
numfiles = pGenerateRandomMotifSequences(OutputBase,Release,3);

pJAR3DFalsePositiveStudy(OutputBase,Release,1,3,numfiles)  % 1 means to read FASTA files and parse and calculate edit distance; slow

pJAR3DFalsePositiveStudy(OutputBase,Release,2,3,numfiles)  % 2 means to accumulate false positive data, which takes some RAM
pSetModelSpecificCutoffs(OutputBase,Release,0)  % Use results from FalsePositiveStudy Mode 2

pJAR3DFalsePositiveStudy(OutputBase,Release,3,3,numfiles)  % 3 means to use model-specific cutoffs

pJAR3DDiagnostics(OutputBase,Release,Release,1)

% use Python to produce GroupToModelDiagnostic.html for each sequence against its group
try
	system(['python ' Pythonpath filesep 'GroupToModelDiagnostic.py ' OutputBase filesep Release]);
catch
	fprintf('Not able to run the diagnostic in which sequences from 3D structures are aligned to their JAR3D models\n');
end

disp(['Timestamp ' datestr(now)])
